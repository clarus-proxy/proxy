java.util.regex.Pattern.compile("^[^/*]*\\*/[^/*]*/([^/*]*)").matcher("*/public./foo").matches();
java.util.regex.Matcher m = java.util.regex.Pattern.compile("^[^/*]*\\*/([^/*]*/[^/*]*)").matcher("*/./foo");
if (m.matches()) {
    System.out.println(m.replaceAll("$1"));
}

"public.foo".split(".")


net.sf.jsqlparser.parser.CCJSqlParserUtil.parse("--ï»¿populate ANON_PATIENT table\n"
+ "--BEGIN;\n"
+ "CREATE TABLE anon_patient(\n"
+ "	pat_id		varchar(8) PRIMARY KEY,\n"
+ "	pat_name	text,\n"
+ "	pat_last1	text,\n"
+ "	pat_last2	text,\n"
+ "	pat_gen		varchar(1),\n"
+ "	pat_zip		varchar(5)\n"
+ ")\n")(net.sf.jsqlparser.statement.create.table.CreateTable) CREATE TABLE anon_patient (pat_id varchar (8) PRIMARY KEY, pat_name text, pat_last1 text, pat_last2 text, pat_gen varchar (1), pat_zip varchar (5));

"CREATE\n\f\t \rTABLE".split("\\s+")(java.lang.String[]) [CREATE, TABLE]
        
java.util.regex.Pattern.compile("POINT|LINESTRING|POLYGON|CIRCULARSTRING|MULTIPOINT|MULTILINESTRING|MULTIPOLYGON|COMPOUNDCURVE|CURVEPOLYGON|MULTICURVE|MULTISURFACE|GEOMETRYCOLLECTION|TRIANGLE|TIN|POLYHEDRALSURFACE", java.util.regex.Pattern.CASE_INSENSITIVE | java.util.regex.Pattern.UNICODE_CASE).matcher("LiNeStRiNg").matches();


java.util.regex.Pattern.compile("FOO?").matcher("FOOOO").matches();

(int)((long) 0xffff & 0xffffl)(int) 65535

"st_asbinary(\"geom\",'NDR'),\"gid\"".split(",(?![^(]*\\))")[0](java.lang.String) st_asbinary("geom",'NDR')


java.util.regex.Pattern p = java.util.regex.Pattern.compile("(a\\.?)?(b\\.?)?(c\\.?)?(d)?");
for (String s: new String[] { "a", "a.b", "a.b.c", "a.b.c.d", "b.c.d", "c.d", "d", "b.c", "b", "c",
                              "A", "A.b", "A.b.c", "A.b.c.d", "B.c.d", "C.d", "D", "B.c", "B", "C"}) {
    System.out.print(String.format("'%s' -> ", s));
    java.util.regex.Matcher m = p.matcher(s);
    if (m.matches()) {
        System.out.print(m.groupCount());
        System.out.println(m.replaceFirst(" 1:$1 2:$2 3:$3 4:$4"));
    } else {
        System.out.println("don't match");
    }
}
